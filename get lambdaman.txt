SQ%,#/-%}4/}4(%}F!-"$!kG!.}#/523%l~~C4}7!3}4(%}9%!2}WUVYj}!.$}-!.9}-%-"%23}/&}/52}#/--5.)49}7/2+%$}(!2$}4/}#/.42/,}F!-"$!kG!.l}H/7j}4%.}9%!23},!4%2j}4()3}7/.$%2&5,}%6%.4})3}34),,}-%-/2):%$}"9}(/,$).'}!}3-!,,}F!-"$!kG!.}#/-0%4)4)/.l~~N()3}#/523%}7),,}4%!#(}9/5}(/7}4/}/04)-!,,9}#/.42/,}F!-"$!kG!.}4/}%!4}!,,}0),,3l}N(%2%})3}./}&25)4}).6/,6%$}f.%)4(%2},/7k(!.').'}./2}()'(k(!.').'gj}!.$}%6%.}"%44%2n}./}'(/343_}N(%}).054}4/}%!#(}02/",%-})3}!}3)-0,%}2%#4!.'5,!2}'2)$}35#(}!3}4(%}&/,,/7).'n~~zzz~aaalalll~lllFllaa~laaaaaaa~zzz~~N(%}'2)$}#/.4!).3}%8!#4,9}/.%}zFz}#(!2!#4%2j}7()#(})3}4(%}34!24).'}0/3)4)/.}/&}F!-"$!kG!.l}N(%2%}7),,}"%}/.%}/2}-/2%}zlz}#(!2!#4%23}).$)#!4).'}4(%},/#!4)/.3}/&}0),,3}4/}"%}%!4%.j}!.$}zaz}#(!2!#4%23}!2%}7!,,3l}N(%}/543)$%}"/5.$!29}/&}4(%}'2)$})3}#/.3)$%2%$}4/}#/.3)34}/&}7!,,3}!3}7%,,l~~;}3/,54)/.}3(/5,$}"%}!}342).'}/&}zOzj}zLzj}z>z}!.$}zFz}#(!2!#4%23}f50j}2)'(4j}$/7.j},%&4j}2%30%#4)6%,9g}).$)#!4).'}4(%}0!4(}4/}4!+%l}@/2}%8!-0,%j}!}0/33)",%}3/,54)/.}4/}4(%}!"/6%}%8!-0,%}'2)$})3}4(%}&/,,/7).'}0!4(n~zzz~FFF>OLLLO>LLOLL~zzz~Q(%.}F!-"$!kG!.})3}).3425#4%$}4/}-/6%}).4/}!}315!2%}#/.4!).).'}!}7!,,j}./4().'}(!00%.3}!.$}4(%}).3425#4)/.})3}3+)00%$l}S/52}3/,54)/.}-!9}#/.3)34}/&}!4}-/34}zVjUUUjUUUz}#(!2!#4%23l~~N(%}&/,,/7).'},%6%,3}!2%}!6!),!",%n~h}u,!-"$!-!.Vw}<%34}3#/2%n}XXl~h}u,!-"$!-!.Ww}<%34}3#/2%n}YYl~h}u,!-"$!-!.Xw}<%34}3#/2%n}Z]l~h}u,!-"$!-!.Yw}<%34}3#/2%n}V\[l~h}u,!-"$!-!.Zw}<%34}3#/2%n}VZ^l~h}u,!-"$!-!.[w}<%34}3#/2%n}\Zl~h}u,!-"$!-!.\w}<%34}3#/2%n}V]Vl~h}u,!-"$!-!.]w}<%34}3#/2%n}VYXl~h}u,!-"$!-!.^w}<%34}3#/2%n}V[Z\l~h}u,!-"$!-!.VUw}<%34}3#/2%n}VZWUl~h}u,!-"$!-!.VVw}<%34}3#/2%n}XV]Xl~h}u,!-"$!-!.VWw}<%34}3#/2%n}XV]Xl~h}u,!-"$!-!.VXw}<%34}3#/2%n}XV]Xl~h}u,!-"$!-!.VYw}<%34}3#/2%n}XV]Xl~h}u,!-"$!-!.VZw}<%34}3#/2%n}XV]Xl~h}u,!-"$!-!.V[w}<%34}3#/2%n}ZVXVl~h}u,!-"$!-!.V\w}<%34}3#/2%n}VWY\l~h}u,!-"$!-!.V]w}<%34}3#/2%n}[WUUl~h}u,!-"$!-!.V^w}<%34}3#/2%n}ZVZ^l~h}u,!-"$!-!.WUw}<%34}3#/2%n}^U[Zl~h}u,!-"$!-!.WVw}<%34}3#/2%n}ZV^Y[Zl~~N/}35"-)4}!}3/,54)/.j}3%.$}!.}C=@J}%802%33)/.}4(!4}%6!,5!4%3}4/n~~zzz~3/,6%},!-"$!-!.R}0!4(~zzz~~S/52}3#/2%})3}.5-"%2}/&}"94%3}4(!4}4(%}C=@J}%802%33)/.3}#/.3)343}/&}f)l%l}4(%}3):%}/&}4(%}JIMN}"/$9gj}3/}!},/7%2}3#/2%})3}"%44%2l~

'Welcome to the Lambda-Man course.\n\nIt was the year 2014, and many members of our community worked hard to control Lambda-Man. Now, ten years later, this wonderful event is still memorized by holding a small Lambda-Man competition.\n\nThis course will teach you how to optimally control Lambda-Man to eat all pills. There is no fruit involved (neither low-hanging nor high-hanging), and even better: no ghosts! The input to each problem is a simple rectangular grid such as the following:\n\n```\n###.#...\n...L..##\n.#######\n```\n\nThe grid contains exactly one `L` character, which is the starting position of Lambda-Man. There will be one or more `.` characters indicating the locations of pills to be eaten, and `#` characters are walls. The outside boundary of the grid is considered to consist of walls as well.\n\nA solution should be a string of `U`, `R`, `D` and `L` characters (up, right, down, left, respectively) indicating the path to take. For example, a possible solution to the above example grid is the following path:\n```\nLLLDURRRUDRRURR\n```\nWhen Lambda-Man is instructed to move into a square containing a wall, nothing happens and the instruction is skipped. Your solution may consist of at most `1,000,000` characters.\n\nThe following levels are available:\n* [lambdaman1] Best score: 33.\n* [lambdaman2] Best score: 44.\n* [lambdaman3] Best score: 58.\n* [lambdaman4] Best score: 176.\n* [lambdaman5] Best score: 159.\n* [lambdaman6] Best score: 75.\n* [lambdaman7] Best score: 181.\n* [lambdaman8] Best score: 143.\n* [lambdaman9] Best score: 1657.\n* [lambdaman10] Best score: 1520.\n* [lambdaman11] Best score: 3183.\n* [lambdaman12] Best score: 3183.\n* [lambdaman13] Best score: 3183.\n* [lambdaman14] Best score: 3183.\n* [lambdaman15] Best score: 3183.\n* [lambdaman16] Best score: 5131.\n* [lambdaman17] Best score: 1247.\n* [lambdaman18] Best score: 6200.\n* [lambdaman19] Best score: 5159.\n* [lambdaman20] Best score: 9065.\n* [lambdaman21] Best score: 519465.\n\nTo submit a solution, send an ICFP expression that evaluates to:\n\n```\nsolve lambdamanX path\n```\n\nYour score is number of bytes that the ICFP expressions consists of (i.e. the size of the POST body), so a lower score is better.\n'
